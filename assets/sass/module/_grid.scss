/*
BEM GRID

A Simple Grid mixin that is easily extendable and customisable to your needs
*/


// BASE VARIABLES //
// You only need to change these based //
$grid-base-width: 1260;
$grid-column-length: 12;
$grid-column-gutter: 20;




@mixin bem-grid($grid-base-width: $grid-base-width, $grid-column-length: $grid-column-length, $gutter: $grid-column-gutter ){

	$gutter-margin: percentage( ($gutter/2)/$grid-base-width );

	$column-width-calc: ($grid-base-width/$grid-column-length);

	$column-width: percentage($column-width-calc/$grid-base-width);

	$mobile-width: $column-width * ($grid-column-length - 1) + $gutter-margin * 2;


	.container{
		position: relative;
		max-width: #{$grid-base-width}px;
		margin: 0 auto;

		/*---------------------------*/
		@include mq($max, $mq-mob) {
		    max-width: $mq-mob;
		}
		/*---------------------------*/

		.lt-ie9 &{
			width: $grid-base-width;
			min-width:$grid-base-width;
		}

	}




	// Your Row Wrapper for columns. This is not essential for your columns
	.row {
		position: relative;
		width:100%;
		margin: 0 auto 20px;
		display: block;
		@include clearfix;
	}




	// THE CORE COLUMN CLASS W/ MODIFIERS
	.col{
		position: relative;
		float: left;
		display: inline;
		margin-left: $gutter-margin;
		margin-right: $gutter-margin;
		vertical-align: top;

		// STANDARD COLUMNS CLASSES e.g. col--1   col--2   col--3 //
			// These are the standard classes to be used in construction //
		@for $i from 1 to $grid-column-length + 1 {
			&--#{$i}{
				width: $column-width * $i - $gutter-margin * 2;
			}
		}

		// OFFSET MODIFIER CLASSES e.g. col--offset-1   col--offset-2   col--offset-3 //
			// The OFFSET classes allow you to push content via margin in place of a column //
		@for $i from 1 to $grid-column-length {
			&--offset-#{$i}{
				margin-left: $column-width * $i + $gutter-margin;
			}
		}

		// FLUSH MODIFIER CLASSES e.g. col--flush-1   col--flush-2   col--flush-3
			// The FLUSH classes remove margins from the columns and so will sit side by side flush without gutters
		@for $i from 1 to $grid-column-length {
			&--flush-#{$i}{
				width: $column-width * $i;
				margin-left: 0;
				margin-right: 0;
			}
		}

		// FULL WIDTH MODIFIER CLASS
			// Takes 100% of its container
		&--full {
			width:100%;
			margin: 0;
		}

		//-----------------------------------------------------------//
		//--------------------- OVERRIDES/RESETS --------------------//
		//-----------------------------------------------------------//

		// Margin Resets
		&--alpha { margin-left: 0; }
		&--omega { margin-right: 0; }


		//Column Align
		&--left {float: left;}
		&--right {float: right;}
		&--center { @include align-center; }


		// Ensure columns span full at mobile res (chained selectors - specificity hack)
		/*---------------------------*/
		@include mq($max, $mq-mob) {

			.container & {
				&.col.col {
		    		width: $mobile-width;
		    		@include align-center;

		    		&[class*="flush"] {
		    			width: $column-width * $grid-column-length;
		    		}
				}
			}
		}
		/*---------------------------*/
	}


}
// INSTANTIATE THE GRID MIXIN
@include bem-grid($grid-base-width, $grid-column-length, $grid-column-gutter);





// RESETTING COLUMN WIDTHS
	// This is not used inside your HTML - Allows you to reset columns via CSS specifically for smaller viewports
@mixin reset-cols-to($cols, $grid-base-width:$grid-base-width, $grid-column-length:$grid-column-length, $gutter:$grid-column-gutter){
	$gutter-margin: percentage(($gutter/2)/$grid-base-width);
	$column-width-calc: ($grid-base-width/$grid-column-length);
	$column-width: percentage($column-width-calc/$grid-base-width);

	width: $column-width * $cols - $gutter-margin * 2;
}
// Usage: @include reset-cols-to(10);

	// Resetting flush columns
@mixin reset-flush-cols-to($cols, $grid-base-width:$grid-base-width, $grid-column-length:$grid-column-length){
	$column-width-calc: ($grid-base-width/$grid-column-length);
	$column-width: percentage($column-width-calc/$grid-base-width);

	width: $column-width * $cols;

}
// Usage: @include reset-flush-cols-to(10);




/*========================================================================================
============================ Responsive Silent Classes ===================================
==========================================================================================*/

// Grid Breakpoints
$maxBreakpoints: (
	desk-lrg: $mq-desk--lrg,
	tab-lrg: $mq-tab--lrg,
	tab: $mq-tab,
	tab-sml: $mq-tab--sml,
	mob-lrg: $mq-mob--lrg,
	mob: $mq-mob
);
$minMaxBreakpoints: (
	tab--quart: (null, $mq-mob + 1),
	tab--half: (null, $mq-mob + 1)
);


// Grid Breakpoint Sizes
$breakpointColumns: (
	quart: 4,
	half: 2,
	full: 1
);


// Grid Breakpoint Classes
.container {
	.col {

		@each $class, $breakpoint in $maxBreakpoints {
			@each $size, $amount in $breakpointColumns {

				// Default Variables
				$breakParam1: $breakpoint;
				$breakParam2: null;
				$breakwidth: $max;

				// Set Class Name
				$element: #{$class}--#{$size};

				// Custom Variables
				@each $customClass, $customBreakpoint in $minMaxBreakpoints {
					@if($element == $customClass) {
						// Set Breakpoint
						$breakParam2: $breakParam1;
						$breakParam1: nth($customBreakpoint, 2);

						$breakwidth: nth($customBreakpoint, 1);

					}
				}

				// Create Class
				&.mq-#{$element} {
					@include mq($breakwidth, $breakParam1, $breakParam2) {
						@include reset-cols-to($grid-column-length / $amount);

					    &--flush {
					    	@include reset-flush-cols-to($grid-column-length / $amount);
					    }
					}
				}

			}
		}

	}
}