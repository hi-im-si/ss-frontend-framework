/*


GRID

Grid mixin allowing to pass base grid width, number of columns and gap


*/



$grid-base-width: 1260;

$grid-column-nr: 12;

$grid-column-gap: 20;

$grid-margin: percentage(($grid-column-gap/2)/$grid-base-width);


@mixin auto-grid($base-width: 1260, $column-nr: 12, $gap: 20 ){

	$gap-margin: percentage(($gap/2)/$base-width);

	$column-width: ($base-width/$column-nr);

	$column-width-percentage: percentage($column-width/$base-width);


	.container{
		position: relative;
		max-width: #{$base-width}px;
		margin: 0 auto;
		

		.lt-ie9 &{
			width: 960px;
			min-width:1260px;
		}

		// max-width: 480px;
		@include mq($max, $mq-mob) {
		    max-width: $mq-mob;
		}

		.col {
			@include mq($max, $mq-mob) {
			    width: 95.833333333333333333333333333333%;
			    @include div-align-center();

			}
		}

	}

	.row {
		position: relative;
		width:100%;
		margin : 0 auto 20px;
		display: block;
		@include clearfix;
	}
		.row--sep {
			padding-bottom: 20px;
			border-bottom: 5px solid $primaryColor;
		}



	.col{
		position: relative;
		float: left;
		display: inline;
		margin-left: $gap-margin;
		margin-right: $gap-margin;
		vertical-align: top;
		@include transition(0.3s $easeInOut all);

	}

	.col--full {
		width:100%;
		margin: 0;
	}

	@for $i from 1 to $column-nr+1{
		.col--#{$i}{
			width: $column-width-percentage * $i - $gap-margin * 2;
		}
	}

	@for $i from 1 to $column-nr+1{
		.col--#{$i}-reset{
			width: $column-width-percentage * $i - $gap-margin;
		}
	}


	@for $i from 1 to $column-nr{
		.col--offset-#{$i}{
			margin-left: $column-width-percentage * $i + $gap-margin;
		}
	}

	/* Columns that have no margins and are flush against eachother */
	@for $i from 1 to $column-nr{
		.col-flush--#{$i}{
			width: $column-width-percentage * $i;
			margin-left: 0;
			margin-right: 0;
		}
	}

	// Custom Static Modifiers Columns
	.col--half {
		width:49%;
		margin-left: 0.971%;
		margin-right: 0.971%;
	}
	.col--thirds {
		width:32%;
		margin-left: 0.971%;
		margin-right: 0.971%;
	}
	.col--fifths {
		width:20%;
		margin-left: 0.971%;
		margin-right: 0.971%;
	}
	.col--10--calc {
		.csscalc & {
			@include calc(width, '100% - 230px');
		}
	}
	.col--9--calc {
		.csscalc & {
			@include calc(width, '100% - 320px');
		}
	}



	

	// Margin Resets
	.col--alpha {
		margin-left: 0;
	}
	.col--omega {
		margin-right: 0;
	}




	// Column Align
	.col--left {float: left;}
	.col--right {float: right;}
	.col--center { @extend %layout--center !optional; }

	.col--align-top { vertical-align: top; }
	.col--align-bottom { vertical-align: bottom; }

	.col--justify {
		text-align: justify;

		&:after {
			content: '';
			display: inline-block;
			width: 100%;
		}
	}


}

@include auto-grid($grid-base-width, $grid-column-nr, $grid-column-gap);


//

@mixin auto-col($cols, $base-width:$grid-base-width, $column-nr:$grid-column-nr, $gap:$grid-column-gap){
	$gap-margin: percentage(($gap/2)/$base-width);
	$column-width: ($base-width/$column-nr);
	$column-width-percentage: percentage($column-width/$base-width);

	width: $column-width-percentage * $cols - $gap-margin * 2;
}

// Usage: @include auto-col(10);

// handy to override column widths

@mixin auto-offset($cols, $base-width:$grid-base-width, $column-nr:$grid-column-nr, $gap:$grid-column-gap){
	$gap-margin: percentage(($gap/2)/$base-width);
	$column-width: ($base-width/$column-nr);
	$column-width-percentage: percentage($column-width/$base-width);

	margin-left: $column-width-percentage * $cols + $gap-margin;
}

/*========================================================================================
============================ Responsive Silent Classes ===================================
==========================================================================================*/

.container {

	.col {

		&[class*="mq-"] {
			@include inline-block(top);
		}


		/* generic desktop overrides */

		&.mq-desk-lrg--full {
			@include mq($max, $mq-desk--lrg) {
			    @include auto-col(12);

			    &--reset {
			    	width:100%;
			    }
			}
		}



		/* generic tablet silent classes */
		&.mq-tab-lrg--half {
			@include mq($max, $mq-tab--lrg) {
			    @include auto-col(6);
			}
		}
		&.mq-tab-lrg--full {
			@include mq($max, $mq-tab--lrg) {
			    @include auto-col(12);

			    &--reset {
			    	width:100%;
			    }
			}
		}


		&.mq-tab--half {
			@include mq(null, $mq-mob + 1, $mq-tab) {
			    @include auto-col(6);
			}
		}
		&.mq-tab--full {
			@include mq($max, $mq-tab) {
			    @include auto-col(12);

			    &--reset {
			    	width:100%;
			    }
			}
		}

		&.mq-tab-sml--full {
			@include mq($max, $mq-tab--sml) {
			    @include auto-col(12);

			    &--reset {
			    	width:100%;
			    }
			}
		}

		&.mq-tab-sml--half {
			@include mq($max, $mq-tab--sml) {
			    @include auto-col(6);
			}
		}





		/* generic mobile silent classes */
		&.mq-mob-lrg--half {
			@include mq($max, $mq-mob--lrg) {
			    @include auto-col(6);
			}
		}
		&.mq-mob-lrg--full {
			@include mq($max, $mq-mob--lrg) {
			    @include auto-col(12);

			    &--reset {
			    	width:100%;
			    }
			}
		}

		&.mq-mob--half {
			@include mq($max, $mq-mob) {
			    @include auto-col(6);
			}
		}
		&.mq-mob--full {
			@include mq($max, $mq-mob) {
			    @include auto-col(12);

			    &--reset {
			    	width:100%;
			    }
			}
		}





	}
}