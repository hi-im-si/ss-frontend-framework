/*
BEM GRID

A Simple Grid mixin that is easily extendable and customisable to your needs
*/


// BASE VARIABLES //
// You only need to change these based //
$grid-base-width: 1260;
$grid-column-length: 12;
$grid-column-gutter: 20;




@mixin bem-grid($grid-base-width: $grid-base-width, $grid-column-length: $grid-column-length, $gutter: $grid-column-gutter ){

	$gutter-margin: percentage( ($gutter/2)/$grid-base-width );

	$column-width-calc: ($grid-base-width/$grid-column-length);

	$column-width: percentage($column-width-calc/$grid-base-width);


	.container{
		position: relative;
		max-width: #{$grid-base-width}px;
		margin: 0 auto;


		/*---------------------------*/
		@include mq($max, $mq-mob) {
		    max-width: $mq-mob;

		    .col {
		    	width: 95.833333333333333333333333333333%;
		    	@include align-center;
		    }
		}
		/*---------------------------*/

		.lt-ie9 &{
			width: $grid-base-width;
			min-width:$grid-base-width;
		}

	}




	// You Row Wrapper for columns. This is not essential for your columns
	.row {
		position: relative;
		width:100%;
		margin: 0 auto 20px;
		display: block;
		@include clearfix;
	}




	// THE CORE COLUMN CLASS W/ MODIFIERS
	.col{
		position: relative;
		float: left;
		display: inline;
		margin-left: $gutter-margin;
		margin-right: $gutter-margin;
		vertical-align: top;

		// STANDARD COLUMNS CLASSES e.g. col--1   col--2   col--3 //
			// These are the standard classes to be used in construction //
		@for $i from 1 to $grid-column-length + 1 {
			&--#{$i}{
				width: $column-width * $i - $gutter-margin * 2;
			}
		}

		// OFFSET MODIFIER CLASSES e.g. col--offset-1   col--offset-2   col--offset-3 //
			// The OFFSET classes allow you to push content via margin in place of a column //
		@for $i from 1 to $grid-column-length {
			&--offset-#{$i}{
				margin-left: $column-width * $i + $gutter-margin;
			}
		}

		// FLUSH MODIFIER CLASSES e.g. col--flush-1   col--flush-2   col--flush-3
			// The FLUSH classes remove margins from the columns and so will sit side by side flush without gutters
		@for $i from 1 to $grid-column-length {
			&--flush-#{$i}{
				width: $column-width * $i;
				margin-left: 0;
				margin-right: 0;
			}
		}

		// FULL WIDTH MODIFIER CLASS
			// Takes 100% of its container
		&--full {
			width:100%;
			margin: 0;
		}

		//-----------------------------------------------------------//
		//--------------------- OVERRIDES/RESETS --------------------//
		//-----------------------------------------------------------//

		// Margin Resets
		&--alpha { margin-left: 0; }
		&--omega { margin-right: 0; }


		//Column Align
		&--left {float: left;}
		&--right {float: right;}
		&--center { @include align-center; }
		&--justify {
			text-align: justify;

			&:after {
				content: '';
				display: inline-block;
				width: 100%;
			}
		}
	}


}
// INSTANTIATE THE GRID MIXIN
@include bem-grid($grid-base-width, $grid-column-length, $grid-column-gutter);






// RESETTING COLUMN WIDTHS
	// This is not used inside your HTML - Allows you to reset columns via CSS specifically for smaller viewports
@mixin reset-cols-to($cols, $grid-base-width:$grid-base-width, $grid-column-length:$grid-column-length, $gutter:$grid-column-gutter){
	$gutter-margin: percentage(($gutter/2)/$grid-base-width);
	$column-width-calc: ($grid-base-width/$grid-column-length);
	$column-width: percentage($column-width-calc/$grid-base-width);

	width: $column-width * $cols - $gutter-margin * 2;
}
// Usage: @include reset-cols-to(10);




/*========================================================================================
============================ Responsive Silent Classes ===================================
==========================================================================================*/

.container {

	.col {

		&[class*="mq-"] {
			@include inline-block(top);
		}


		/* generic desktop overrides */

		&.mq-desk-lrg--full {
			@include mq($max, $mq-desk--lrg) {
			    @include reset-cols-to(12);

			    &--reset {
			    	width:100%;
			    }
			}
		}



		/* generic tablet silent classes */
		&.mq-tab-lrg--half {
			/*---------------------------*/
			@include mq($max, $mq-tab--lrg) {
			    @include reset-cols-to(6);
			}
			/*---------------------------*/
		}
		&.mq-tab-lrg--full {
			/*---------------------------*/
			@include mq($max, $mq-tab--lrg) {
			    @include reset-cols-to(12);

			    &--reset {
			    	width:100%;
			    }
			}
			/*---------------------------*/
		}


		&.mq-tab--half {
			@include mq(null, $mq-mob + 1, $mq-tab) {
			    @include reset-cols-to(6);
			}
		}
		&.mq-tab--full {
			/*---------------------------*/
			@include mq($max, $mq-tab) {
			    @include reset-cols-to(12);

			    &--reset {
			    	width:100%;
			    }
			}
			/*---------------------------*/
		}

		&.mq-tab-sml--full {
			/*---------------------------*/
			@include mq($max, $mq-tab--sml) {
			    @include reset-cols-to(12);

			    &--reset {
			    	width:100%;
			    }
			}
			/*---------------------------*/
		}

		&.mq-tab-sml--half {
			/*---------------------------*/
			@include mq($max, $mq-tab--sml) {
			    @include reset-cols-to(6);
			}
			/*---------------------------*/
		}





		/* generic mobile silent classes */
		&.mq-mob-lrg--half {
			/*---------------------------*/
			@include mq($max, $mq-mob--lrg) {
			    @include reset-cols-to(6);
			}
			/*---------------------------*/
		}
		&.mq-mob-lrg--full {
			/*---------------------------*/
			@include mq($max, $mq-mob--lrg) {
			    @include reset-cols-to(12);

			    &--reset {
			    	width:100%;
			    }
			}
			/*---------------------------*/
		}

		&.mq-mob--half {
			/*---------------------------*/
			@include mq($max, $mq-mob) {
			    @include reset-cols-to(6);
			}
			/*---------------------------*/
		}
		&.mq-mob--full {
			/*---------------------------*/
			@include mq($max, $mq-mob) {
			    @include reset-cols-to(12);

			    &--reset {
			    	width:100%;
			    }
			}
			/*---------------------------*/
		}


	}
}