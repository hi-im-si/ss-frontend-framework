// --------------------------------------------------------------------------- //
// ------------------------------- BOX MODEL RELATED ------------------------- //
// --------------------------------------------------------------------------- //

// Positioning offsets
@mixin _position ($property: absolute, $top: auto, $right: auto, $bottom: auto, $left: auto, $zindex: 2) {
	position: $property;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
	z-index: $zindex;
}

// usage:  @include _position(absolute,10px,0px,auto,auto,2);
//	returns    	position:absolute;
//				top:10px;
// 				right:0px;
// 				bottom:auto;
// 				left:auto;
// 				z-index:5


// Vertical Aligning
@mixin vertical-align($position: relative, $width: auto, $height: auto, $translate: -50%) {
	display: block;
	margin: 0 auto;
	width: $width;
	height: $height;
	@include _position($position, 50%, 0, auto, 0, 5);
	transform: translateY($translate);
}

// usage: @include vertical-align(absolute);


// Center elements by overriding margins and removing float
// ---- you may need to force the elements to center through the horrors of specificity
@mixin align-center($force: false) {

	@if $force == true {

		margin-left: auto!important;
		margin-right: auto!important;
		display: block!important;
		float: none!important;

	} @else {

		margin-left: auto;
		margin-right: auto;
		display: block;
		float: none;

	}

}

// usage: @include align-center(true/false);


// Inline-Block
@mixin inline-block($align: bottom) {
	display: inline-block;
	vertical-align: $align;
}

@mixin clearfix {

	&:before,
	&:after {
		content: " ";
		display: table;
	}

	&:after {
		clear:both;
	}

	& {
		*zoom:1;
	}
}


// Maintain ratio mixin. Great for responsive grids, or videos.
// https://gist.github.com/brianmcallister/2932463
//
// $ratio - Ratio the element needs to maintain.
//
// Examples
//
//   // A 16:9 ratio would look like this:
//   .element {
//     @include ratio(16 9);
//   }

@mixin ratio($ratio: 1 1) {

    @if length($ratio) < 2 or length($ratio) > 2 {
        @warn "$ratio must be a list with two values.";
    }

    $height: (nth($ratio, 2) / nth($ratio, 1)) * 100%;

    &:before {
        padding-bottom: $height;
    }
}